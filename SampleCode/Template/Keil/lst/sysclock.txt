; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sysclock.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sysclock.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\sysclock.crf ..\sysclock.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;45      */
;;;46     void SYS_Init()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;47     {
000004  2059              MOVS     r0,#0x59
000006  0784              LSLS     r4,r0,#30
000008  2116              MOVS     r1,#0x16
00000a  2288              MOVS     r2,#0x88
                  |L1.12|
00000c  f8c40100          STR      r0,[r4,#0x100]
000010  f8c41100          STR      r1,[r4,#0x100]
000014  f8c42100          STR      r2,[r4,#0x100]
000018  f8d43100          LDR      r3,[r4,#0x100]
00001c  2b00              CMP      r3,#0
00001e  d0f5              BEQ      |L1.12|
;;;48         /*---------------------------------------------------------------------------------------------------------*/
;;;49         /* Init System Clock                                                                                       */
;;;50         /*---------------------------------------------------------------------------------------------------------*/
;;;51         //CLK->PWRCTL = (CLK->PWRCTL & ~(0x0000000Ful)) | 0x0000001Ful;
;;;52         //CLK->PLLCTL = (CLK->PLLCTL & ~(0x108FFFFFul)) | 0x0008421Eul;
;;;53         //CLK->CLKDIV0 = (CLK->CLKDIV0 & ~(0xFFFFFFFFul)) | 0x00000000ul;
;;;54         //CLK->CLKDIV1 = (CLK->CLKDIV1 & ~(0x00FFFFFFul)) | 0x00000000ul;
;;;55         //CLK->CLKDIV3 = (CLK->CLKDIV3 & ~(0xFFFF0000ul)) | 0x00000000ul;
;;;56         //CLK->CLKDIV4 = (CLK->CLKDIV4 & ~(0x0000FFFFul)) | 0x00000000ul;
;;;57         //CLK->PCLKDIV = (CLK->PCLKDIV & ~(0x00000077ul)) | 0x00000011ul;
;;;58         //CLK->CLKSEL0 = (CLK->CLKSEL0 & ~(0x00F0003Ful)) | 0x00F3013Aul;
;;;59         //CLK->CLKSEL1 = (CLK->CLKSEL1 & ~(0xFF777703ul)) | 0xBC000003ul;
;;;60         //CLK->CLKSEL2 = (CLK->CLKSEL2 & ~(0x00003FFFul)) | 0x000003ABul;
;;;61         //CLK->CLKSEL3 = (CLK->CLKSEL3 & ~(0xFF03023Ful)) | 0xFF00003Ful;
;;;62         //CLK->AHBCLK = (CLK->AHBCLK & ~(0x0003D4EEul)) | 0x00008006ul;
;;;63         //CLK->APBCLK0 = (CLK->APBCLK0 & ~(0x7F3FF7FFul)) | 0x0001003Cul;
;;;64         //CLK->APBCLK1 = (CLK->APBCLK1 & ~(0x4CCF1347ul)) | 0x00000000ul;
;;;65         //CLK->CLKOCTL = (CLK->CLKOCTL & ~(0x0000007Ful)) | 0x00000000ul;
;;;66         //SysTick->CTRL = (SysTick->CTRL & ~(0x00000005ul)) | 0x00000000ul;
;;;67     
;;;68         /* Unlock protected registers */
;;;69         SYS_UnlockReg();
;;;70     
;;;71         /* Set XT1_OUT(PF.2) and XT1_IN(PF.3) to input mode */
;;;72         PF->MODE &= ~(GPIO_MODE_MODE2_Msk | GPIO_MODE_MODE3_Msk);
000020  f04f2040          MOV      r0,#0x40004000
000024  f8d01140          LDR      r1,[r0,#0x140]
000028  f02101f0          BIC      r1,r1,#0xf0
00002c  f8c01140          STR      r1,[r0,#0x140]
;;;73     
;;;74         /* Enable clock source */
;;;75         CLK_EnableXtalRC(CLK_PWRCTL_LIRCEN_Msk|CLK_PWRCTL_HIRCEN_Msk|CLK_PWRCTL_LXTEN_Msk|CLK_PWRCTL_HXTEN_Msk);
000030  200f              MOVS     r0,#0xf
000032  f7fffffe          BL       CLK_EnableXtalRC
;;;76     
;;;77         /* Waiting for clock source ready */
;;;78         CLK_WaitClockReady(CLK_STATUS_LIRCSTB_Msk|CLK_STATUS_HIRCSTB_Msk|CLK_STATUS_LXTSTB_Msk|CLK_STATUS_HXTSTB_Msk);
000036  201b              MOVS     r0,#0x1b
000038  f7fffffe          BL       CLK_WaitClockReady
;;;79     
;;;80         /* Disable PLL first to avoid unstable when setting PLL */
;;;81         CLK_DisablePLL();
00003c  f7fffffe          BL       CLK_DisablePLL
;;;82     
;;;83         /* Set PLL frequency */
;;;84         CLK->PLLCTL = (CLK->PLLCTL & ~(0x108FFFFFul)) | 0x0008421Eul;
000040  f8d40240          LDR      r0,[r4,#0x240]
000044  4926              LDR      r1,|L1.224|
000046  4008              ANDS     r0,r0,r1
000048  4926              LDR      r1,|L1.228|
00004a  4308              ORRS     r0,r0,r1
00004c  f8c40240          STR      r0,[r4,#0x240]
;;;85     
;;;86         /* Waiting for PLL ready */
;;;87         CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
000050  2004              MOVS     r0,#4
000052  f50474e2          ADD      r4,r4,#0x1c4
000056  f7fffffe          BL       CLK_WaitClockReady
;;;88     
;;;89         /* If the defines do not exist in your project, please refer to the related clk.h in the clk_h folder appended to the tool package. */
;;;90         /* Set HCLK clock */
;;;91         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_PLL, CLK_CLKDIV0_HCLK(1));
00005a  2100              MOVS     r1,#0
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       CLK_SetHCLK
;;;92     
;;;93         /* Set PCLK-related clock */
;;;94         CLK->PCLKDIV = (CLK_PCLKDIV_PCLK0DIV2 | CLK_PCLKDIV_PCLK1DIV2);
000062  2011              MOVS     r0,#0x11
000064  6720              STR      r0,[r4,#0x70]
;;;95     
;;;96         /* Enable IP clock */
;;;97         CLK_EnableModuleClock(ISP_MODULE);
000066  2002              MOVS     r0,#2
000068  f7fffffe          BL       CLK_EnableModuleClock
;;;98         CLK_EnableModuleClock(PDMA_MODULE);
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       CLK_EnableModuleClock
;;;99         CLK_EnableModuleClock(TMR0_MODULE);
000072  4d1d              LDR      r5,|L1.232|
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       CLK_EnableModuleClock
;;;100        CLK_EnableModuleClock(TMR1_MODULE);
00007a  4e1c              LDR      r6,|L1.236|
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       CLK_EnableModuleClock
;;;101        CLK_EnableModuleClock(TMR2_MODULE);
000082  4f1b              LDR      r7,|L1.240|
000084  4638              MOV      r0,r7
000086  f7fffffe          BL       CLK_EnableModuleClock
;;;102        CLK_EnableModuleClock(TMR3_MODULE);
00008a  f8df8068          LDR      r8,|L1.244|
00008e  4640              MOV      r0,r8
000090  f7fffffe          BL       CLK_EnableModuleClock
;;;103        CLK_EnableModuleClock(UART0_MODULE);
000094  f8df9060          LDR      r9,|L1.248|
000098  4648              MOV      r0,r9
00009a  f7fffffe          BL       CLK_EnableModuleClock
;;;104    
;;;105        /* Set IP clock */
;;;106        CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HXT, MODULE_NoMsk);
00009e  2200              MOVS     r2,#0
0000a0  4611              MOV      r1,r2
0000a2  4628              MOV      r0,r5
0000a4  f7fffffe          BL       CLK_SetModuleClock
;;;107        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_HXT, MODULE_NoMsk);
0000a8  2200              MOVS     r2,#0
0000aa  4611              MOV      r1,r2
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       CLK_SetModuleClock
;;;108        CLK_SetModuleClock(TMR2_MODULE, CLK_CLKSEL1_TMR2SEL_HXT, MODULE_NoMsk);
0000b2  2200              MOVS     r2,#0
0000b4  4611              MOV      r1,r2
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       CLK_SetModuleClock
;;;109        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_HXT, MODULE_NoMsk);
0000bc  2200              MOVS     r2,#0
0000be  4611              MOV      r1,r2
0000c0  4640              MOV      r0,r8
0000c2  f7fffffe          BL       CLK_SetModuleClock
;;;110        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HXT, CLK_CLKDIV0_UART0(1));
0000c6  2200              MOVS     r2,#0
0000c8  4611              MOV      r1,r2
0000ca  4648              MOV      r0,r9
0000cc  f7fffffe          BL       CLK_SetModuleClock
;;;111    
;;;112        /* Update System Core Clock */
;;;113        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;114        SystemCoreClockUpdate();
0000d0  f7fffffe          BL       SystemCoreClockUpdate
0000d4  2000              MOVS     r0,#0
0000d6  f8440cc4          STR      r0,[r4,#-0xc4]
;;;115    
;;;116        /* Lock protected registers */
;;;117        SYS_LockReg();
;;;118    
;;;119        return;
;;;120    }
0000da  e8bd87f0          POP      {r4-r10,pc}
;;;121    /*** (C) COPYRIGHT 2013-2019 Nuvoton Technology Corp. ***/
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      0xef700000
                  |L1.228|
                          DCD      0x0008421e
                  |L1.232|
                          DCD      0x5e800002
                  |L1.236|
                          DCD      0x5ec00003
                  |L1.240|
                          DCD      0x5f000004
                  |L1.244|
                          DCD      0x5f400005
                  |L1.248|
                          DCD      0x57803d10

;*** Start embedded assembler ***

#line 1 "..\\sysclock.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_sysclock_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_sysclock_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_sysclock_c_SYS_Init____REVSH|
#line 402
|__asm___10_sysclock_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_sysclock_c_SYS_Init____RRX|
#line 587
|__asm___10_sysclock_c_SYS_Init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
