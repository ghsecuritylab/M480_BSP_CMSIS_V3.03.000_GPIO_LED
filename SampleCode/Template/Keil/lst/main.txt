; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.BasicTimer_TIMER3_Init||, CODE, READONLY, ALIGN=2

                  BasicTimer_TIMER3_Init PROC
;;;189    
;;;190    void BasicTimer_TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;191    {
;;;192        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L1.44|
000004  f44f727a          MOV      r2,#0x3e8
000008  f04f6100          MOV      r1,#0x8000000
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  f0405000          ORR      r0,r0,#0x20000000
000018  6020              STR      r0,[r4,#0]
;;;193        TIMER_EnableInt(TIMER3);
;;;194        NVIC_EnableIRQ(TMR3_IRQn);	
00001a  2023              MOVS     r0,#0x23
00001c  f7fffffe          BL       NVIC_EnableIRQ
000020  6820              LDR      r0,[r4,#0]
000022  f0404080          ORR      r0,r0,#0x40000000
000026  6020              STR      r0,[r4,#0]
;;;195        TIMER_Start(TIMER3);
;;;196    }
000028  bd10              POP      {r4,pc}
;;;197    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x40051100

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;197    
;;;198    void GPIO_Init(void)
000000  b510              PUSH     {r4,lr}
;;;199    {
;;;200        GPIO_SetMode(PH, BIT0, GPIO_MODE_OUTPUT);
000002  4c09              LDR      r4,|L2.40|
000004  2201              MOVS     r2,#1
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;201        GPIO_SetMode(PH, BIT1, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;202        GPIO_SetMode(PH, BIT2, GPIO_MODE_OUTPUT);	
000018  4620              MOV      r0,r4
00001a  2201              MOVS     r2,#1
00001c  e8bd4010          POP      {r4,lr}
000020  2104              MOVS     r1,#4
000022  f7ffbffe          B.W      GPIO_SetMode
;;;203    }
;;;204    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x400041c0

                          AREA ||i.LEDTimer_TIMER0_Init||, CODE, READONLY, ALIGN=2

                  LEDTimer_TIMER0_Init PROC
;;;141    
;;;142    void LEDTimer_TIMER0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144    	#if defined (LED_TIMER_200K)
;;;145    	{
;;;146    		TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 200000);
;;;147    	}
;;;148    	#elif defined (LED_TIMER_10K)
;;;149    	{
;;;150        	TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 10000);
000002  4c0b              LDR      r4,|L3.48|
000004  f2427210          MOV      r2,#0x2710
000008  f04f6100          MOV      r1,#0x8000000
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
;;;151    		RYG_Init_10K();
000012  f7fffffe          BL       RYG_Init_10K
000016  6820              LDR      r0,[r4,#0]
000018  f0405000          ORR      r0,r0,#0x20000000
00001c  6020              STR      r0,[r4,#0]
;;;152    	}
;;;153    	#endif
;;;154    
;;;155        TIMER_EnableInt(TIMER0);
;;;156        NVIC_EnableIRQ(TMR0_IRQn);	
00001e  2020              MOVS     r0,#0x20
000020  f7fffffe          BL       NVIC_EnableIRQ
000024  6820              LDR      r0,[r4,#0]
000026  f0404080          ORR      r0,r0,#0x40000000
00002a  6020              STR      r0,[r4,#0]
;;;157        TIMER_Start(TIMER0);
;;;158    }
00002c  bd10              POP      {r4,pc}
;;;159    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x40050000

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1625    */
;;;1626   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1627   {
;;;1628     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;1629   }
000014  4770              BX       lr
;;;1630   
                          ENDP


                          AREA ||i.RYG_BreathDimming_10K||, CODE, READONLY, ALIGN=2

                  RYG_BreathDimming_10K PROC
;;;78     
;;;79     void RYG_BreathDimming_10K(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;80     {
;;;81     	/*
;;;82     		EC_M451_RGBLED_Dimming_V1.0
;;;83     		https://www.nuvoton.com/hq/resource-download.jsp?tp_GUID=EC0120160725162719
;;;84     	*/
;;;85        	uint32_t LED_duty,RLED,BLED,GLED,LED_brea;
;;;86     
;;;87     	LED_cnt++;
000002  4e27              LDR      r6,|L5.160|
;;;88     	LED_duty=LED_cnt%100;
000004  2064              MOVS     r0,#0x64
000006  4633              MOV      r3,r6                 ;87
000008  6931              LDR      r1,[r6,#0x10]         ;87  ; LED_cnt
00000a  1c49              ADDS     r1,r1,#1              ;87
00000c  fbb1f2f0          UDIV     r2,r1,r0
;;;89     	if ((brea==1)&&((brea_cnt%2)==0))
000010  6131              STR      r1,[r6,#0x10]  ; LED_cnt
000012  68f4              LDR      r4,[r6,#0xc]  ; brea
000014  fb001212          MLS      r2,r0,r2,r1           ;88
000018  695b              LDR      r3,[r3,#0x14]
00001a  2c01              CMP      r4,#1
00001c  d007              BEQ      |L5.46|
;;;90     			LED_brea=100-(LED_cnt/100);
;;;91     	else if (brea==1)
;;;92     			LED_brea=LED_cnt/100;
;;;93     	else
;;;94     			LED_brea=0;
00001e  2000              MOVS     r0,#0
                  |L5.32|
;;;95     	
;;;96     	RLED=((int32_t)(LED1_R-LED_duty-LED_brea)>0)?1:0;
000020  69f4              LDR      r4,[r6,#0x1c]  ; LED1_R
000022  1aa4              SUBS     r4,r4,r2
000024  1a24              SUBS     r4,r4,r0
000026  2c00              CMP      r4,#0
000028  dd08              BLE      |L5.60|
00002a  2501              MOVS     r5,#1
00002c  e007              B        |L5.62|
                  |L5.46|
00002e  fbb1f0f0          UDIV     r0,r1,r0              ;92
000032  07dc              LSLS     r4,r3,#31             ;89
000034  d1f4              BNE      |L5.32|
000036  f1c00064          RSB      r0,r0,#0x64           ;90
00003a  e7f1              B        |L5.32|
                  |L5.60|
00003c  2500              MOVS     r5,#0
                  |L5.62|
;;;97     	BLED=((int32_t)(LED1_B-LED_duty-LED_brea)>0)?1:0;
00003e  6a74              LDR      r4,[r6,#0x24]  ; LED1_B
000040  1aa4              SUBS     r4,r4,r2
000042  1a24              SUBS     r4,r4,r0
000044  2c00              CMP      r4,#0
000046  dd01              BLE      |L5.76|
000048  2401              MOVS     r4,#1
00004a  e000              B        |L5.78|
                  |L5.76|
00004c  2400              MOVS     r4,#0
                  |L5.78|
;;;98     	GLED=((int32_t)(LED1_G-LED_duty-LED_brea)>0)?1:0;	
00004e  6a37              LDR      r7,[r6,#0x20]  ; LED1_G
000050  1aba              SUBS     r2,r7,r2
000052  1a10              SUBS     r0,r2,r0
000054  2800              CMP      r0,#0
000056  dd01              BLE      |L5.92|
000058  2201              MOVS     r2,#1
00005a  e000              B        |L5.94|
                  |L5.92|
00005c  2200              MOVS     r2,#0
                  |L5.94|
;;;99     
;;;100    	if (LED_cnt>=(Blink*1000))
00005e  6ab0              LDR      r0,[r6,#0x28]  ; Blink
000060  eb000740          ADD      r7,r0,r0,LSL #1
000064  ebc710c0          RSB      r0,r7,r0,LSL #7
000068  ebb10fc0          CMP      r1,r0,LSL #3
00006c  d302              BCC      |L5.116|
;;;101    	{
;;;102    		RLED=0;
00006e  2500              MOVS     r5,#0
;;;103    		BLED=0;
000070  462c              MOV      r4,r5
;;;104    		GLED=0;
000072  462a              MOV      r2,r5
                  |L5.116|
;;;105    	}
;;;106    		
;;;107    	PH->DOUT = (PH->DOUT|BIT0|BIT1|BIT2)&(~((RLED<<0)|(GLED<<1)|(BLED<<2)));
000074  ea450042          ORR      r0,r5,r2,LSL #1
000078  ea400484          ORR      r4,r0,r4,LSL #2
00007c  f04f2040          MOV      r0,#0x40004000
000080  f8d021c8          LDR      r2,[r0,#0x1c8]
000084  f0420207          ORR      r2,r2,#7
000088  43a2              BICS     r2,r2,r4
00008a  f8c021c8          STR      r2,[r0,#0x1c8]
;;;108    	if (LED_cnt==10000)
00008e  f5a1501c          SUB      r0,r1,#0x2700
000092  3810              SUBS     r0,r0,#0x10
000094  d102              BNE      |L5.156|
;;;109    	{
;;;110    		LED_cnt=0;
000096  1c5b              ADDS     r3,r3,#1
000098  e9c60304          STRD     r0,r3,[r6,#0x10]
                  |L5.156|
;;;111    		brea_cnt++;
;;;112    	}
;;;113    }
00009c  bdf0              POP      {r4-r7,pc}
;;;114    
                          ENDP

00009e  0000              DCW      0x0000
                  |L5.160|
                          DCD      ||.data||

                          AREA ||i.RYG_BreathDimming_200K||, CODE, READONLY, ALIGN=2

                  RYG_BreathDimming_200K PROC
;;;30     
;;;31     void RYG_BreathDimming_200K(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;32     {
;;;33     
;;;34     	#define INC_VALUE   		5
;;;35     	#define PWM_WIDTH    	1500
;;;36     
;;;37         static uint8_t state=0;   
;;;38     	static uint16_t led_i = 0 ;
;;;39     	static uint16_t led_H = 0 ;
;;;40     	static uint16_t led_W = 0 ;
;;;41     
;;;42         ++led_i;
000002  4a16              LDR      r2,|L6.92|
;;;43          if(led_i < led_H)
;;;44          {
;;;45     		PH0=1;
000004  4d16              LDR      r5,|L6.96|
000006  2401              MOVS     r4,#1
000008  8850              LDRH     r0,[r2,#2]            ;42  ; led_i
;;;46     		PH1=1;
00000a  1d2e              ADDS     r6,r5,#4
00000c  1c40              ADDS     r0,r0,#1              ;42
00000e  b280              UXTH     r0,r0                 ;42
000010  8050              STRH     r0,[r2,#2]            ;42
000012  8891              LDRH     r1,[r2,#4]            ;43  ; led_H
;;;47     		PH2=1;
000014  1d37              ADDS     r7,r6,#4
000016  4288              CMP      r0,r1                 ;43
000018  d203              BCS      |L6.34|
00001a  602c              STR      r4,[r5,#0]            ;45
00001c  6034              STR      r4,[r6,#0]            ;46
00001e  603c              STR      r4,[r7,#0]
;;;48          }
;;;49          else if((led_i >= led_H) && (led_i < led_W))
;;;50          {
;;;51     		PH0=0; 
;;;52     		PH1=0;
;;;53     		PH2=0;
;;;54          }
;;;55          else
;;;56          {
;;;57              led_i = 0;
;;;58              led_W = PWM_WIDTH;
;;;59              if(state==0)
;;;60              {
;;;61                  led_H += INC_VALUE;
;;;62                  if(led_H >= PWM_WIDTH)
;;;63                  {
;;;64                      state = 1;
;;;65                  }
;;;66              }
;;;67              else
;;;68              {            
;;;69                  led_H -= INC_VALUE;
;;;70                  if(led_H <= 100)
;;;71                  {
;;;72                      state = 0;
;;;73                  }
;;;74              }
;;;75          }
;;;76      
;;;77     }
000020  bdf0              POP      {r4-r7,pc}
                  |L6.34|
000022  f8b2c006          LDRH     r12,[r2,#6]           ;49  ; led_W
000026  2300              MOVS     r3,#0                 ;49
000028  4560              CMP      r0,r12                ;49
00002a  d203              BCS      |L6.52|
00002c  602b              STR      r3,[r5,#0]            ;51
00002e  6033              STR      r3,[r6,#0]            ;52
000030  603b              STR      r3,[r7,#0]            ;53
                  |L6.50|
000032  bdf0              POP      {r4-r7,pc}
                  |L6.52|
000034  8053              STRH     r3,[r2,#2]            ;57
000036  f24055dc          MOV      r5,#0x5dc             ;58
00003a  80d5              STRH     r5,[r2,#6]            ;58
00003c  7810              LDRB     r0,[r2,#0]            ;59  ; state
00003e  b130              CBZ      r0,|L6.78|
000040  1f49              SUBS     r1,r1,#5              ;59
000042  b288              UXTH     r0,r1                 ;69
000044  8090              STRH     r0,[r2,#4]            ;69
000046  2864              CMP      r0,#0x64              ;70
000048  d8f3              BHI      |L6.50|
00004a  7013              STRB     r3,[r2,#0]            ;72
                  |L6.76|
00004c  bdf0              POP      {r4-r7,pc}
                  |L6.78|
00004e  1d49              ADDS     r1,r1,#5
000050  b288              UXTH     r0,r1                 ;61
000052  8090              STRH     r0,[r2,#4]            ;61
000054  42a8              CMP      r0,r5                 ;62
000056  d3f9              BCC      |L6.76|
000058  7014              STRB     r4,[r2,#0]            ;64
00005a  bdf0              POP      {r4-r7,pc}
;;;78     
                          ENDP

                  |L6.92|
                          DCD      ||.data||
                  |L6.96|
                          DCD      0x400049c0

                          AREA ||i.RYG_Init_10K||, CODE, READONLY, ALIGN=2

                  RYG_Init_10K PROC
;;;114    
;;;115    void RYG_Init_10K(void)
000000  4804              LDR      r0,|L7.20|
;;;116    {
;;;117    	LED1_R=100;
000002  2164              MOVS     r1,#0x64
;;;118    	LED1_G=100;
000004  61c1              STR      r1,[r0,#0x1c]  ; LED1_R
;;;119    	LED1_B=100;
000006  6201              STR      r1,[r0,#0x20]  ; LED1_G
;;;120    	Blink=10;
000008  6241              STR      r1,[r0,#0x24]  ; LED1_B
00000a  210a              MOVS     r1,#0xa
;;;121    	brea=1;
00000c  6281              STR      r1,[r0,#0x28]  ; Blink
00000e  2101              MOVS     r1,#1
000010  60c1              STR      r1,[r0,#0xc]  ; brea
;;;122    }
000012  4770              BX       lr
;;;123    
                          ENDP

                  |L7.20|
                          DCD      ||.data||

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;123    
;;;124    void TMR0_IRQHandler(void)
000000  4805              LDR      r0,|L8.24|
000002  6881              LDR      r1,[r0,#8]
000004  f3c10100          UBFX     r1,r1,#0,#1
;;;125    {
000008  2900              CMP      r1,#0
00000a  d003              BEQ      |L8.20|
00000c  2101              MOVS     r1,#1
00000e  6081              STR      r1,[r0,#8]
;;;126        if(TIMER_GetIntFlag(TIMER0) == 1)
;;;127        {
;;;128            TIMER_ClearIntFlag(TIMER0);
;;;129    
;;;130    		#if defined (LED_TIMER_200K)
;;;131    		{
;;;132    			RYG_BreathDimming_200K();
;;;133    		}
;;;134    		#elif defined (LED_TIMER_10K)
;;;135    		{
;;;136    			RYG_BreathDimming_10K();
000010  f7ffbffe          B.W      RYG_BreathDimming_10K
                  |L8.20|
;;;137    		}
;;;138    		#endif
;;;139        }
;;;140    }
000014  4770              BX       lr
;;;141    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40050000

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  TMR3_IRQHandler PROC
;;;160    
;;;161    void TMR3_IRQHandler(void)
000000  480c              LDR      r0,|L9.52|
000002  6881              LDR      r1,[r0,#8]
000004  f3c10100          UBFX     r1,r1,#0,#1
;;;162    {
000008  2900              CMP      r1,#0
00000a  d011              BEQ      |L9.48|
00000c  2101              MOVS     r1,#1
00000e  6081              STR      r1,[r0,#8]
;;;163    
;;;164    //	static uint16_t cnt_gpio = 0;
;;;165    
;;;166    	static uint32_t LOG = 0;
;;;167    	static uint16_t CNT = 0;
;;;168    
;;;169        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;170        {
;;;171            TIMER_ClearIntFlag(TIMER3);
;;;172    
;;;173    		if (CNT++ >= 1000)
000010  4909              LDR      r1,|L9.56|
000012  8908              LDRH     r0,[r1,#8]  ; CNT
000014  1c42              ADDS     r2,r0,#1
000016  810a              STRH     r2,[r1,#8]
000018  f5b07f7a          CMP      r0,#0x3e8
00001c  d308              BCC      |L9.48|
;;;174    		{
;;;175    			CNT = 0;
00001e  2000              MOVS     r0,#0
000020  8108              STRH     r0,[r1,#8]
;;;176            	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
000022  698a              LDR      r2,[r1,#0x18]  ; LOG
000024  1c50              ADDS     r0,r2,#1
000026  6188              STR      r0,[r1,#0x18]  ; LOG
000028  4904              LDR      r1,|L9.60|
00002a  a005              ADR      r0,|L9.64|
00002c  f7ffbffe          B.W      __2printf
                  |L9.48|
;;;177    		}
;;;178    
;;;179    //		if (cnt_gpio++ >= 1000)
;;;180    //		{
;;;181    //			cnt_gpio = 0;
;;;182    //			GPIO_TOGGLE(PH1);
;;;183    //			PH1 = ~PH1;
;;;184    //		}
;;;185    		
;;;186    
;;;187        }
;;;188    }
000030  4770              BX       lr
;;;189    
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
                          DCD      0x40051100
                  |L9.56|
                          DCD      ||.data||
                  |L9.60|
                          DCD      ||.constdata||
                  |L9.64|
000040  2573203a          DCB      "%s : %4d\r\n",0
000044  20253464
000048  0d0a00  
00004b  00                DCB      0

                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART0_IRQHandler PROC
;;;204    
;;;205    void UART0_IRQHandler(void)
000000  4912              LDR      r1,|L10.76|
;;;206    {
;;;207    	if (UART_GET_INT_FLAG(UART0,UART_INTSTS_RDAINT_Msk))
000002  69c8              LDR      r0,[r1,#0x1c]
000004  05c2              LSLS     r2,r0,#23
;;;208    	{
;;;209    		while(!UART_GET_RX_EMPTY(UART0))
;;;210    		{
;;;211    			uartDev.buf[uartDev.len++] = UART_READ(UART0);
000006  4812              LDR      r0,|L10.80|
000008  d409              BMI      |L10.30|
00000a  e00b              B        |L10.36|
                  |L10.12|
00000c  680a              LDR      r2,[r1,#0]
00000e  f8b03400          LDRH     r3,[r0,#0x400]  ; uartDev
000012  54c2              STRB     r2,[r0,r3]
000014  f8b02400          LDRH     r2,[r0,#0x400]  ; uartDev
000018  1c52              ADDS     r2,r2,#1
00001a  f8a02400          STRH     r2,[r0,#0x400]
                  |L10.30|
00001e  698a              LDR      r2,[r1,#0x18]         ;209
000020  0452              LSLS     r2,r2,#17             ;209
000022  d5f3              BPL      |L10.12|
                  |L10.36|
;;;212    		}
;;;213    	}
;;;214    	
;;;215    	if (UART_GET_INT_FLAG(UART0,UART_INTSTS_RXTOIF_Msk))
000024  69ca              LDR      r2,[r1,#0x1c]
000026  06d2              LSLS     r2,r2,#27
000028  d409              BMI      |L10.62|
;;;216    	{
;;;217    		while(!UART_GET_RX_EMPTY(UART0))
;;;218    		{
;;;219    			uartDev.buf[uartDev.len++] = UART_READ(UART0);
;;;220    		}
;;;221    		
;;;222    		uartDev.end = 1;
;;;223    	}
;;;224    }
00002a  4770              BX       lr
                  |L10.44|
00002c  680a              LDR      r2,[r1,#0]            ;219
00002e  f8b03400          LDRH     r3,[r0,#0x400]        ;219  ; uartDev
000032  54c2              STRB     r2,[r0,r3]            ;219
000034  f8b02400          LDRH     r2,[r0,#0x400]        ;219  ; uartDev
000038  1c52              ADDS     r2,r2,#1              ;219
00003a  f8a02400          STRH     r2,[r0,#0x400]        ;219
                  |L10.62|
00003e  698a              LDR      r2,[r1,#0x18]         ;217
000040  0452              LSLS     r2,r2,#17             ;217
000042  d5f3              BPL      |L10.44|
000044  2101              MOVS     r1,#1                 ;222
000046  f8801402          STRB     r1,[r0,#0x402]        ;222
00004a  4770              BX       lr
;;;225    
                          ENDP

                  |L10.76|
                          DCD      0x40070000
                  |L10.80|
                          DCD      ||.bss||

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;253    
;;;254    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;255    {
;;;256        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;257        SYS->GPB_MFPH &= ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk);
000002  f04f4080          MOV      r0,#0x40000000
000006  6bc1              LDR      r1,[r0,#0x3c]
000008  f421017f          BIC      r1,r1,#0xff0000
00000c  63c1              STR      r1,[r0,#0x3c]
;;;258        SYS->GPB_MFPH |= (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
00000e  6bc1              LDR      r1,[r0,#0x3c]
000010  f44101cc          ORR      r1,r1,#0x660000
000014  63c1              STR      r1,[r0,#0x3c]
;;;259    
;;;260        SYS_ResetModule(UART0_RST);
000016  481e              LDR      r0,|L11.144|
000018  f7fffffe          BL       SYS_ResetModule
;;;261    
;;;262        /* Configure UART0 and set UART0 baud rate */
;;;263        UART_Open(UART0, 115200);
00001c  4c1d              LDR      r4,|L11.148|
00001e  f44f31e1          MOV      r1,#0x1c200
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       UART_Open
;;;264    
;;;265    	/* Set UART receive time-out */
;;;266    	UART_SetTimeoutCnt(UART0, 20);
000028  2114              MOVS     r1,#0x14
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       UART_SetTimeoutCnt
;;;267    
;;;268    	
;;;269    	/* Set UART FIFO RX interrupt trigger level to 4-bytes*/
;;;270    	UART0->FIFO &= ~UART_FIFO_RFITL_4BYTES;
000030  68a0              LDR      r0,[r4,#8]
000032  f0200010          BIC      r0,r0,#0x10
000036  60a0              STR      r0,[r4,#8]
;;;271    	UART0->FIFO |= UART_FIFO_RFITL_8BYTES;
000038  68a0              LDR      r0,[r4,#8]
00003a  f0400020          ORR      r0,r0,#0x20
00003e  60a0              STR      r0,[r4,#8]
;;;272    
;;;273    	/* Enable UART Interrupt - */
;;;274    	UART_ENABLE_INT(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_TOCNTEN_Msk | UART_INTEN_RXTOIEN_Msk);
000040  6860              LDR      r0,[r4,#4]
000042  f6400111          MOV      r1,#0x811
000046  4308              ORRS     r0,r0,r1
000048  6060              STR      r0,[r4,#4]
;;;275    	
;;;276    	NVIC_EnableIRQ(UART0_IRQn);
00004a  2024              MOVS     r0,#0x24
00004c  f7fffffe          BL       NVIC_EnableIRQ
;;;277    	
;;;278    	memset(&uartDev, 0x00, sizeof(UART_BUF_t));
000050  f2404104          MOV      r1,#0x404
000054  4810              LDR      r0,|L11.152|
000056  f7fffffe          BL       __aeabi_memclr
;;;279    
;;;280    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00005a  f7fffffe          BL       CLK_GetCPUFreq
00005e  4601              MOV      r1,r0
000060  a00e              ADR      r0,|L11.156|
000062  f7fffffe          BL       __2printf
;;;281    	printf("CLK_GetHCLKFreq : %8d\r\n",CLK_GetHCLKFreq());	
000066  f7fffffe          BL       CLK_GetHCLKFreq
00006a  4601              MOV      r1,r0
00006c  a012              ADR      r0,|L11.184|
00006e  f7fffffe          BL       __2printf
;;;282    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000072  f7fffffe          BL       CLK_GetPCLK0Freq
000076  4601              MOV      r1,r0
000078  a015              ADR      r0,|L11.208|
00007a  f7fffffe          BL       __2printf
;;;283    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());
00007e  f7fffffe          BL       CLK_GetPCLK1Freq
000082  4601              MOV      r1,r0
000084  e8bd4010          POP      {r4,lr}
000088  a018              ADR      r0,|L11.236|
00008a  f7ffbffe          B.W      __2printf
;;;284    //	printf("%2d\r\n",PDMATIMEOUT(1));
;;;285    	
;;;286    }
;;;287    
                          ENDP

00008e  0000              DCW      0x0000
                  |L11.144|
                          DCD      0x04000010
                  |L11.148|
                          DCD      0x40070000
                  |L11.152|
                          DCD      ||.bss||
                  |L11.156|
00009c  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
0000a0  4b5f4765
0000a4  74435055
0000a8  46726571
0000ac  203a2025
0000b0  38640d0a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L11.184|
0000b8  434c4b5f          DCB      "CLK_GetHCLKFreq : %8d\r\n",0
0000bc  47657448
0000c0  434c4b46
0000c4  72657120
0000c8  3a202538
0000cc  640d0a00
                  |L11.208|
0000d0  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000d4  47657450
0000d8  434c4b30
0000dc  46726571
0000e0  203a2025
0000e4  38640d0a
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L11.236|
0000ec  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000f0  47657450
0000f4  434c4b31
0000f8  46726571
0000fc  203a2025
000100  38640d0a
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0

                          AREA ||i.UART0_Process||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  UART0_Process PROC
;;;225    
;;;226    void UART0_Process(void)
000000  b570              PUSH     {r4-r6,lr}
;;;227    {
;;;228    
;;;229    	/*
;;;230    		EC_M451_UART_Timerout_V1.00.zip
;;;231    		https://www.nuvoton.com/hq/resource-download.jsp?tp_GUID=EC0120160728090754
;;;232    	*/
;;;233    	
;;;234    	if (uartDev.end)
000002  4c12              LDR      r4,|L12.76|
;;;235    	{
;;;236    		while(!UART_GET_RX_EMPTY(UART0))
;;;237    		{
;;;238    			uartDev.buf[uartDev.len++] = UART_READ(UART0);
000004  4d12              LDR      r5,|L12.80|
000006  f8940402          LDRB     r0,[r4,#0x402]        ;234  ; uartDev
00000a  b948              CBNZ     r0,|L12.32|
;;;239    		}
;;;240    
;;;241    		#if 1
;;;242    		printf("%s : %d\r\n",__FUNCTION__,uartDev.len);
;;;243    
;;;244    		#endif
;;;245    
;;;246    		UART_Write(UART0,uartDev.buf,uartDev.len);
;;;247    		
;;;248    		memset(&uartDev, 0x00, sizeof(UART_BUF_t));
;;;249    	}
;;;250    
;;;251    }
00000c  bd70              POP      {r4-r6,pc}
                  |L12.14|
00000e  6828              LDR      r0,[r5,#0]            ;238
000010  f8b41400          LDRH     r1,[r4,#0x400]        ;238  ; uartDev
000014  5460              STRB     r0,[r4,r1]            ;238
000016  f8b41400          LDRH     r1,[r4,#0x400]        ;238  ; uartDev
00001a  1c49              ADDS     r1,r1,#1              ;238
00001c  f8a41400          STRH     r1,[r4,#0x400]        ;238
                  |L12.32|
000020  69a8              LDR      r0,[r5,#0x18]         ;236
000022  0440              LSLS     r0,r0,#17             ;236
000024  d5f3              BPL      |L12.14|
000026  f8b42400          LDRH     r2,[r4,#0x400]        ;242  ; uartDev
00002a  490a              LDR      r1,|L12.84|
00002c  a00a              ADR      r0,|L12.88|
00002e  f7fffffe          BL       __2printf
000032  f8b42400          LDRH     r2,[r4,#0x400]        ;246  ; uartDev
000036  4905              LDR      r1,|L12.76|
000038  4628              MOV      r0,r5                 ;246
00003a  f7fffffe          BL       UART_Write
00003e  e8bd4070          POP      {r4-r6,lr}            ;248
000042  f2404104          MOV      r1,#0x404             ;248
000046  4801              LDR      r0,|L12.76|
000048  f7ffbffe          B.W      __aeabi_memclr
;;;252    
                          ENDP

                  |L12.76|
                          DCD      ||.bss||
                  |L12.80|
                          DCD      0x40070000
                  |L12.84|
                          DCD      ||.constdata||+0x10
                  |L12.88|
000058  2573203a          DCB      "%s : %d\r\n",0
00005c  2025640d
000060  0a00    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;295    
;;;296    int main()
000000  f7fffffe          BL       SYS_Init
;;;297    {
;;;298    
;;;299        SYS_Init();
;;;300    	
;;;301        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;302    
;;;303    	GPIO_Init();
000008  f7fffffe          BL       GPIO_Init
;;;304    	
;;;305    	BasicTimer_TIMER3_Init();
00000c  f7fffffe          BL       BasicTimer_TIMER3_Init
;;;306    
;;;307    	LEDTimer_TIMER0_Init();
000010  f7fffffe          BL       LEDTimer_TIMER0_Init
                  |L13.20|
;;;308    	
;;;309        /* Got no where to go, just loop forever */
;;;310        while(1)
;;;311        {
;;;312    		UART0_Process();
000014  f7fffffe          BL       UART0_Process
000018  e7fc              B        |L13.20|
;;;313        }
;;;314    
;;;315    }
;;;316    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  uartDev
                          %        1028

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  544d5233          DCB      0x54,0x4d,0x52,0x33
000004  5f495251          DCB      0x5f,0x49,0x52,0x51
000008  48616e64          DCB      0x48,0x61,0x6e,0x64
00000c  6c657200          DCB      0x6c,0x65,0x72,0x00
                  |symbol_number.44|
000010  55415254          DCB      0x55,0x41,0x52,0x54
000014  305f5072          DCB      0x30,0x5f,0x50,0x72
000018  6f636573          DCB      0x6f,0x63,0x65,0x73
00001c  7300              DCB      0x73,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  state
000000  0000              DCB      0x00,0x00
                  led_i
000002  0000              DCW      0x0000
                  led_H
000004  0000              DCW      0x0000
                  led_W
000006  0000              DCW      0x0000
                  ||CNT||
000008  0000              DCW      0x0000
00000a  0000              DCB      0x00,0x00
                  brea
                          DCD      0x00000000
                  LED_cnt
                          DCD      0x00000000
                  brea_cnt
                          DCD      0x00000000
                  LOG
                          DCD      0x00000000
                  LED1_R
                          DCD      0x00000000
                  LED1_G
                          DCD      0x00000000
                  LED1_B
                          DCD      0x00000000
                  Blink
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_brea____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_brea____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_brea____REVSH|
#line 402
|__asm___6_main_c_brea____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_brea____RRX|
#line 587
|__asm___6_main_c_brea____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
